Directory structure under /sbin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
All minibase executables are installed under /sbin, using the original
meaning of sbin (static binaries). Preferably nothing else should go to
sbin. Dynamically linked stuff should probably go to /usr/{s,}bin.
Busybox, if used, should be in /bin

  * /sbin

    The files directly under /sbin are commands that make sense in PATH.

  * /sbin/service

    Executables here are long-running services that do *not* make sense
    as commands and should not be in PATH. Most should be run supervised.
    If manual run is necessary, the command should be /sbin/service/foo .

  * /sbin/system

    Executables that are neither services nor commands suitable for PATH.
    Most are short-running commands only needed during boot or shutdown,
    or meant primarily for initrd (see below).


Separating root and non-root PATH
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Current structure does not separate privileged and non-privileged commands.
This may become necessary at some point to allow seamless sudo-ing for tools
like ping, although probably there are better ways to do that anyway.

Splitting privileged and non-privileged tools isn't as simple as it may seem.
Privileged-ness of several tools depends on system configuration (svctl, wifi,
ifctl, vtctl). There are two tools in /sbin that will likely remain there
despite having different priv levels:

    /sbin/modprobe -- root-only, location hard-coded in the kernel
    /sbin/msh -- all users, for general sanity shouln't be packed deeper

The number of tools that surely are root-only is surprisingly short, too:

    ipcfg
    locfg
    modprobe
    kmount
    dmcrypt

This hardly warrant a dedicated directory.


Initrd-only executables
~~~~~~~~~~~~~~~~~~~~~~~
Tools like findblk and passblk should never run from a mounted rootfs.
Because their purpose it to find said rootfs. Their place is in initrd.

However, most practical setups will likely implement mkinitcpio or some
similar tool to build initrd images from within the running system.
This tool will need to get the executables somewhere.
Given the purpose of /sbin/system, it would do just fine.

Initrd also needs some binaries like msh that are not initrd-specific,
so the tool that builds it will need to pick binaries from /sbin anyway.
