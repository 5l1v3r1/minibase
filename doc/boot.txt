Booting the system with minibase
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Happy path only. Note some of the tools are not ready at the time of writing.

* The kernel loads initrd, starts /linuxrc (msh script)
* linuxrc runs findblk or passblk to find system partitions
	* passblk (or findblk) waits for devices to appear if necessary
	* passblk prompts for passphrase and sets up disk encryption
* linuxrc calls mount on all system partitions
* linuxrc execs into switchroot

* switchroot replaces initrd root with the real root
	* moves mounts onto the real root
	* cleans up initrd
	* pivots the root
* switchroot execs into /sbin/init on the real root partition

* init is a simple executable (../src/init/init.c)
* init sets up basic process environment
* init runs /etc/sysinit and waits for it to exit
	* sysinit is a host-specific script (part of the host config)
	* sysinit performs one-time system configuration
		* sysctl and related stuff
		* hwclock
		* loadkeys, setfonts if necessary
		* possibly iptables
* init execs into /sbin/super

* super runs as pid 1 for the whole time the system is up
* super (re)spawns all long-running services
	* udevd
	* wimon
	* vtmux
	...
* on SIGTERM/SIGINT/svc request, super kills all spawned services
  and waits for them to terminate
* super execs into /sbin/reboot

* reboot syncs, umounts all mounted partitions and calls reboot(2)
* that's all really, this part is not scripted in any way


User session startup sequence
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* vtmux gets a command to start a new session
* vtmux spawns /etc/vts/$name with all fds directed to /dev/ttyN
* $name is a host-specific msh script
* $name changes its credentials (uid, gid, groups, maybe also caps)
* $name execs into appropriate interactive shell (xinit, weston, bash etc)
* vtmux reaps the process once it dies

The /etc/vtx/$name script itself is a part of host configuration,
replacing the rightmost fields in conventional /etc/passwd and
the 3rd field in /etc/group.


Service startup sequence
~~~~~~~~~~~~~~~~~~~~~~~~
* super spawns /etc/rc/$name which is a msh script
* $name sets up process environment, uids, gids and so on
* $name execs into the actual service executable

The script itself is a part of host configuration.


Implementation notes
~~~~~~~~~~~~~~~~~~~~
The purpose of init (the small executable that bootstraps super) is to handle
possible failures in /etc/sysinit. If that one fails, init execs directly into
/sbin/reboot in attempt to bring the system down. Doing this nicely is just
slightly above msh scripting abilities at this moment. Maybe at some point
it should become a script. Maybe not.

Same logic applies to linuxrc (the initrd entry point), but it's simpler
and less likely to require proper termination. Root should be probably be
mounted read-only at that point, with remounting later in /etc/sysinit.
With that in mind, linuxrc may be just a plain msh script that exits if
anything goes wrong, causing kernel panic and system halt.

When/if it will become clear how to handle initrd failures, something better
than msh script may get written.
