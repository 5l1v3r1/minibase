Booting the system with minibase
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generic boot sequence for PC-like systems that may need to load modules,
wait for devices and deal with non-persistent device names in order to locate
system partitions. See Embedded section below for non-initrd boot.

* The kernel loads initrd, starts /init (msh script)
* init starts devinit in foreground to load modules
* devinit starts /etc/devinit (msh script)
* devinit script runs findblk (+ passblk) to find system partitions
	* findblk waits for devices to appear if necessary
	* passblk prompts for passphrase and sets up disk encryption
* once partitions are located, devinit exits
* init calls mount on all system partitions
* init execs into switchroot

* switchroot replaces initrd root with the real root
	* moves mounts onto the real root
	* cleans up initrd
	* pivots the root
* switchroot execs into /etc/boot/start (msh script) on the real
  root partition

* start sets up basic process environment
* start performs one-time system configuration
	* sysctl and related stuff
	* hwclock if necessary
	* loadkeys, setfonts if necessary
	* possibly iptables
* start execs into /sbin/system/svhub

* svhub runs as pid 1 for the whole time the system is up
* svhub (re)spawns all long-running services
	* udevmod
	* sysklogd
	* ifmon
	* vtmux
	...
* long-running services keep the system running, svhub respawns
  them if necessary
* on SIGTERM/SIGINT/svctl request, svhub kills all spawned services
  and waits for them to terminate
* svhub execs into /sbin/system/reboot

* reboot syncs, umounts all mounted partitions and calls reboot(2)
* that's all really, this part is not scripted in any way


User session startup sequence
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* vtmux receives command to start a new session
* vtmux spawns /etc/vtmux/$name with fds 0-2 directed to /dev/ttyN
* $name gets an open control channel to vtmux on fd 3
* $name is a host-specific msh script
* $name changes its credentials (uid, gid, groups, maybe also caps)
* $name execs into appropriate interactive shell (xinit, weston, bash etc)
* vtmux reaps the process once it dies

The /etc/vtmux/$name script itself is a part of host configuration,
replacing the rightmost fields in conventional /etc/passwd and
the 3rd field in /etc/group. The scripts passes fd 3 to the spawned
application so that the latter would be able to access KMS and input
devices (see ./vtmux.txt).


Service startup sequence
~~~~~~~~~~~~~~~~~~~~~~~~
* svhub spawns /etc/init/$name (msh script)
* $name sets up process environment, uids, gids and so on
* $name execs into the actual service executable

The script itself is a part of host configuration.


Handling errors in pid 1 scripts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Normally msh aborts on any errors. This is not acceptable when the script
runs as pid 1 since that would cause immediate panic. For this particular
case, msh got `onexit` built-in. The expected usage is always

	onexit /path/to/reboot

but having it as an explicit command removes the need to hard-code any paths
into msh. This way, instead of calling exit(), msh execs into reboot, and
the system gets terminated properly.

Another idea considered and rejected was a small wrapper executable what would
"catch" non-zero msh exits and exec into reboot. This would avoid the need to
have a single-use built-in, however it would also prevent msh from running as
pid 1 and using its *other* builtins to set up environment for subsequent
processes. Turns out onexit implementation within msh is much easier than any
workaround not involving msh.


Embedded systems
~~~~~~~~~~~~~~~~
In case device nodes for system partitions are predictable (because
of device trees for instance) and the kernel is capable of finding
them without userspace help, initrd is not needed and the boot sequence
becomes much simpler.

* The kernel boots, mounts / and spawns /sbin/init (msh script)

* /sbin/init mounts all necessary file systems,
  waiting for devices using msh waitfor built-in if necessary.
* sets up basic process environment
* performs one-time system configuration
	* sysctl and related stuff
	* hwclock if necessary
	* loadkeys, setfonts if necessary
	* possibly iptables
* finally execs into /sbin/system/svhub

Once svhub is running, the system behaves just like in the PC case.
udevmod (if needed at all) is only run as a regular service.
Neither findblk nor passblk are used in this case, all devices are
located using their /dev node names.
