What exactly does udevd do and why is it necessary?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The kernel transmits udev events through netlink sockets. Any userspace
process can subscribe and listen to these events.

A client for udev events is any userspace process that needs to do something
on udev events. This typically means picking up (opening) device nodes once
they appear.

                +--> k-client     +-> u-client
	        |                 |
     kernel >---+--> k-client     +-> u-client
                |                 |
                +--> udevd >------+

Assuming devtmpfs is mounted, relevant device nodes are already there when
the kernel event arrives for k-clients. These clients however will see the
original kernel name of the node, original permissions (0:0 -rw-------) and
the original contents of the event.

The idea behind udevd was to have a generic tool that could in some cases

   * chmod device nodes
   * rename device nodes
   * change the contents of udev events

If any of these is done in a way that affects the clients (e.g. the client
is non-privileged and needs the node chmod'ed before it could open it),
letting the client be a k-client and react to kernel events would lead to
a race condition.

To avoid races, clients that can possibly be affected by whatever udevd does
subscribe to a different message group on netlink sockets, and do not receive
kernel messages directly. Instead, they get their messages from udevd, which
is expected to re-transmit the kernel messages but may as well alter, delay
or drop some of them to match the changes made on the device nodes.

The catch: any client that MAY be affected, MUST listen to udevd messages
and not the kernel message. Conventional udevd (eudevd, systemd-udevd) can
change pretty much any event, so ALL clients written to work in udevd systems
must be u-clients and listen to udevd events.

Because of the way netlink works, u-clients running in a system without udevd
do not produce obvious errors, but they don't get any udev events either.
To let them run properly, something must be retransmitting the kernel events
to the udevd group even if the system never alters device nodes in any way.

Within minibase, udevmod handles re-transmission and also provides limited
chmod/chown functionality, even though minibase itself does not need it.


Device renaming
~~~~~~~~~~~~~~~
In current Linux device names are unreliable and often meaningless.
One has to sift through /sys or even probe the device to figure out what
exactly say /dev/input/event19 refers to. It would be better to name devices
in meaningful name, say /dev/input/ptr-stick instead of nondescript
/dev/input/event19, and /dev/input/keyboard instead of /dev/input/event0.

Implementing this idea well seems to be impossible.

Lots of device-specific information is typically available through /sys.
Renaming a node in /dev does not change any nodes in /sys.
Finding and renaming all nodes in /sys is not easy, and probably not feasible.
Handling /dev nodes named differently than /sys names may be possible but not
always, and it is tricky/confusing.

Persistent device names would make sense if they could be used as regular
file names, for instance for scripting or in config files. This isn't the case.
Pretty any way of using device names in scripts or configs would result in
racy application that won't handle hot-plugging well. Those that will handle
hot-plugging, would not need persistent device names most likely.


Non-privileged access to devices
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The reason for udevd to chmod or chown device nodes is to allow non-privileged
users to use certain devices. So far, it looks like it is possible to get away
without relying on this at all in minibase.

There are very few subsystems that the users may need to access at all.

ALSA (raw or via libasound) requires non-privileged device access, but direct
access to ALSA is a bad idea anyway and with a sound server running only the
server itself needs the devices.

Inputs and block devices must be requested via privileged services (vtmux and
mountd respectively). This seems to be the best way to handle this problem
in general within minibase. A device manager that grands access to certain
devices on request, possibly also locking or ensuring non-interference between
the clients.

Sometimes it makes sense to let users access serial ports. However, serial
ports are TTYs, figuring out which TTYs are serial ports is tricky, some may
need privileged locking anyway (e.g. to avoid users sniffing on pppd), so it
really calls for another privileged device manager.

DRIs (non-mastering) remain perhaps the only kind of devices for which group
based restrictions maybe make sense.


Device tagging and libinput
~~~~~~~~~~~~~~~~~~~~~~~~~~~
The original udevd has the ability to pass device configuration to clients.
Input devices get the following keys added to their events to indicate which
event they can generate:

    ID_INPUT=1
    ID_INPUT_KEY=1
    ID_INPUT_KEYBOARD=1

Additionally udevd can transmit XKB configuration for keyboards the same way,
by adding keys to the event.

The idea was apparently that udevd is better equipped for querying and matching
physical device data, so all per-device configuration would be stored in udevd
configs and the clients will only get it through udev events.

It's a horrible idea that makes no sense given the way udev works (one-sided
event broadcast), existing implementation are racy in a subtle way, and the
whole thing only really works if the clients are homogeneous -- like say all
of them use libinput and xkbcommon. Because Freedesktop.

The problem with this is that Xorg udev code as well as udev code within
libinput will simply ignore input devices not tagged ID_INPUT. In addition,
Xorg will not apply MatchIs{Keyboard,Pointer,Touchpad} from its config unless
the devices are tagged the right way.

Solely for compatibility with braindamaged Freedesktop stuff, udevmod from
minibase does provide these keys. This is seen as temporary solution until
the crap gets patched out of all relevant clients. My current opinion on this
is that the clients know better how to match the devices they use, and have
better ways of storing their own configuration than shoving it into udevd.d.


Initial device scan
~~~~~~~~~~~~~~~~~~~
The kernel broadcasts the events when some change happens with the devices.
Most clients however are more interested in keeping a list of all devices
available at a given time. Common implementations usually look like this:

    open udev socket

    foreach entry in /sys/class/whatever:
        read event from /sys/class/whatever/$entry/uevent
        add-device event

    while recv event from socket:
	if event is "add":
		add-device event
	else if event is "remove:
		remove-device event

There may be some variation to this, but overall idea is the same.
And it works well for k-clients.

But u-clients are in trouble: uevent files provide kernel events, not
whatever udevs would normally send them. There are no added tags there,
for instance. There is no way to trigger udevd into repeating relevant
events for a single client either.

The Freedesktop solution to this is to maintain another hierarchy,
/run/udev/data, and store udevd events there for libudev to read during
the initial scan. And it would have worked for u-clients actually
if done the most straightforward way.

But that's not what they did! Instead, libudev reads the original kernel
events from /sys, uses the contents there to locate the right entry in
/run/udev/data which only stores the tags added by udevd, and merges the
two together to get the complete udevd event. The names of the entries in
/run/udev/data do not match /sys names, or /dev names, and the whole thing
is inherently racy. Now recall that some clients reject devices not tagged
by udevd. Yeah. Freedesktop.

There is some limited support for this in minibase, just enough to get
past ID_INPUT checks, but the only real solution is to patch this crap
out of anything that still uses it. Preferably removing libudev dependency
as well.


How it should be done
~~~~~~~~~~~~~~~~~~~~~
Linux is a fat monolithic kernel that exposes very high level interfaces
for stuff like inputs. In the vast majority of cases, userspace clients
should just pick all available devices (with enough event bits set) and
use their events directly.

Clients should expose their own configuration knobs to the user if necessary,
and take care about persisting the settings. Most devices come with some sort
of identification marks -- those marks are class-specific, and the client
working with a particular device class should be well aware how to use them.
For inputs, that would be NAME from uevent. It's not something that a generic
tool like udevd can use for its generic database, but it *is* something that
say Xorg input subsystem may use to identify the device on a particular host.

For devices that need some sort of presets to be useful, the query should
be performed at the top-most level and the configuration should be applied
the same user manual configuration works.

Example, with inputs:

  * new device appears, udev reports it
  * Xorg adds adds the device immediately, making it visible in xinput
  * DE notices a new xinput device
  * DE spawns a tool to query the device in its (possibly remote) database
  * reply arrives, this device is quirky and needs particular configuration
  * the tool applies device configuration via xinput
  * DE saves current configuration for active input devices on exit,
    and restores them during next startup using NAMEs to identify devices.

This approach simplifies the X part, and moves configuration query from
a highly privileged, system-wide service (udevd) into a DE-specific tool
that runs non-privileged and can do much involved queries, including asking
the user interactively. This tool may use something similar to hwdb, but
it doesn't need to; it can just as well query something over the net.

Storing configuration close to the code being configures (Xorg or DE in this
case) removes the need to broadcast service-specific configuration "to whom
it may concern" like it's done in udevd with xkb configuration, and makes it
much easier for the user to intervene if necessary.


Technical background
~~~~~~~~~~~~~~~~~~~~
To listen to udev events, clients open PF_NETLINK socket and subscribe either
UDEV_MGRP_KERNEL (bit 0, mask (1<<0)) or UDEV_MGRP_LIBUDEV (bit 1, mask (1<<1))
groups when bind()ing it. UDEV_MGRP_KERNEL if for k-client, UDEV_MGRP_LIBUDEV
is for u-clients.

udev messages do not follow common netlink conventions. Kernel message are
packets of 0-terminated strings that look like this (\0 replaced with \n):

        add@/devices/platform/i8042/serio1/input/input13/event10
        ACTION=add
        DEVPATH=/devices/platform/i8042/serio1/input/input13/event10
        SUBSYSTEM=input
        MAJOR=13
        MINOR=74
        DEVNAME=input/event10

Retransmitted messages from the original udevd use yet another format,
private to udevd/libudev, which carries the same data with prepended binary
header. Because, you know, Freedesktop. Luckily libudev accepts raw kernel
messages even when listening on UDEV_MGRP_LIBUDEV, so minibase only uses
the kernel format.

Check temp/udev/udevdump.c, a simple tool that dumps all incoming messages,
to see how it all works on the client side. Events for a particular device
can be triggered at any moment like this:

  echo add > /sys/devices/platform/i8042/serio1/input/input13/event10/uevent

This will force the kernel to repeat the "add" event above. Beware the event
will be processes just like any real kernel event. Some u-clients may try
to do unexpected things in response.
