What's the purpose of udevd?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The answer is surprisingly not simple. Current kernels run with devtmpfs,
create device nodes themselves, and load firmware without userspace helpers.
Originally that was the bulk of the work udevd did.

Another common udevd task is chowning/chmodding newly created device nodes.
There are very few nodes that require chowning however. ALSA is perhaps the
only common example.

So what really remains for udevd is this:

	* naming nodes based on userspace device identification
	* chowning/chmodding nodes that need it
	* running userspace tools for devices that need it

Only identification applies to sizable fraction of device nodes. The other
two should only be needed for small number of unusual in some sense devices.


Autoplug, new device announcements, and libudev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Some applications may want to pick up new devices immediately as they appear.
Common examples: vtmux and display managers are expected to pick up new inputs
immediately without explicit command to do so.

In mainline udevd-based (and later systemd-based) setups the application are
expected to listen to udev events to figure out when a device gets added to
the system, and pick devices on their own based on /sys data. This approach
leads to pervasive libudev dependency, since fetching userspace-relevant
information from either udev events or /sys is non-trivial task.

Another problem is synchronization issues. The application gets the kernel
events at about the same time udevd does, and thus may get to act before
udevd is done with the device. The application may wait for udevd events,
but those are not guaranteed to come. Handling this all adds even more
weight to libudev, and makes it harder to avoid.

The approach minibase takes here is different. The applications are only
expected to watch for device nodes (or more often, symlinks) with pre-defined
names to appear, and only in exceptional cases check relevant /sys entries.
Most of device identification work is done in udev. This way, instead of
parsing udev events the applications mostly deal with inotify instead, which
is easier to handle, are not specific to device handling, and require no
dedicated library support.


Device identification workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In mainline udev device identification and renaming is implemented as
a two-way communication between udevd and the identification tool:
udevd spawns the identification tool, the tool does its job and outputs
results to stdout, udevd parses the results and renames the nodes.
See IMPORT and typical ENV usage.

This is in part necessary because mainline udevd is capable of doing
some identification without spawning any tools. See KERNEL, ATTRS --
in fact, any condition that is not ENV following IMPORT.

In minibase a much simpler scheme is used. The spawned tool does all
/dev changes on its own, without issuing commands up to its parent.
This removes most of the parsing and formatting code, in a way similar
to how netlink-talking dhcp removes the need to have if-up scripts.
The downsize is less scriptability -- which, like in the case of dhcp,
is mostly pointless anyway.


udevd/udevh split
~~~~~~~~~~~~~~~~~
Mainline udevd is a long-running process that does a lot of parsing
with pretty involved memory management. Device events are rare,
and with the changes in workflow described above there's strong
incentive to separate the long-running, NETLINK_UDEV socket-listening part
from the code that parses configs and modifies /dev state. Effectively
this means moving *all* /dev-modifying code into a chain of tools similar
to blkid, let's call it udevh, and spawning it on each device event.

This is similar to how busybox mdev is indended to be used, except with
a userspace listening tool (udevd) in place of /proc/sys/kernel/hotplug.
This udevd could serialize the events and avoid annoying concurrency issues
describe in mdev docs.

The cons of implementing udev this way is that it will spawn a lot more
processes than necessary. As described above, the fraction of devices
requiring any changes in /dev tree is small. This may point out than the
long-running udevd needs to do some event filtering, maybe configure or
maybe not. There are clearly lots of devices than could be safely ignored
by udev because no-one should ever want to chown or rename them.
