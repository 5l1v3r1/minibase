The problem with ifmon
~~~~~~~~~~~~~~~~~~~~~~
Networking devices are hot-pluggable and often need their configuration to be
persisted and applied once the device (re-)appears. This calls for some sort
of a monitoring service that would give devices persistent names and spawn
initialization scripts. A simple nice solution which unfortunately would not
work very well.

From user's point of view, it would be nice to have commands like "use wifi
connection" or "use wired connection", or maybe "use 3G" which would switch
between available uplinks. In some cases, setting temporary IP explicitly
on a wired connection may be useful (initial router setup etc). This calls
for some sort of connection manager, which would need to monitor interfaces
anyway but would rely primarily on dynamic configuration, not on the user
writing some scripts.

Another complication working against the simple interface monitor design is
that lots of use cases aren't really limited to per-interface configuration.
Even bridging several ethX-es into br0 is better done by a tool that keeps
track of br0 while adding ethX as they appear. On the flip side, connection
manager may need to handle uplinks that are not netdevs until initialized,
like PPP connections (VPN or GSM), and possibly also handle stuff that is
not directly related to netdevs, like for instance reconfiguring netfilter
or starting/stopping NTP service.

Non-uniform interfaces and the need for dynamic configuration almost force
connection manager design with lots of hard-coded decisions. It's just not
feasible to leave those for to the user while also keeping sane command
interface. The connection manager must be aware what "bridging" means,
what's "VPN", it needs to know how to run WPA supplicant and pppd and so on.
Those are all special cases, and the way they are handled must be hard-coded
to some extent.

There is no obvious clean nice solution to this. The idea behind current
design is to have connection manager tailored for a particular use case.
If desired configuration is out of the range that the connection manager
supports, then another manager must be written (or current one extended)
to support that particular case. For instance, current implementation assumes
there's only one wifi uplink at any given moment. It is definitely possible
to run arbitrary number of wifi interfaces at the same time, but doing so
will likely require modifications to the connection manager.


The simple interface monitor
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Quick description to explain what the text above is about.

/etc/netdevs: (or /var/netdevs if dynamic configuration is expected)

    00:11:22:33:44:55 lan0
    00:11:22:33:44:56 lan1
    23:00:17:97:AF:BC wan

/etc/ifmon/lan0: (gets called with $1 set to "eth1")

    #!/sbin/msh

    ipcfg $1 192.168.1.1/24

/etc/ifmon/lan1: ($1 = "eth0")

    #!/sbin/msh

    ifcfg $1 192.168.2.1/24

/etc/ifmon/wan: ($1 = "eth2")

    #!/sbin/msh

    # some command to enable dhcp client for $1

Interface renaming is optional, something like this would work even the kernel
names are left intact (eth0, eth1, eth1 instead of lan0, lan1 and wan).

It looks like a simple straighforward solution but only until it gets past
the most simple static IP assignment.


Why integrated DHCP?
~~~~~~~~~~~~~~~~~~~~
Placing DHCP code within the connection manager simplifies both a lot.

Whatever handles DHCP should also handle user-provided or static IPs,
at which point it's basically interface monitor already. Having DHCP split
from the rest of connection manager would require more code to support IPC
than to actually do DHCP.
