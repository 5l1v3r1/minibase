#!/bin/sh

unset arch cross target cc ar strip tp lto cflags

commanddir=/sbin
servicedir=/sbin/service
systemdir=/sbin/system

man1dir=/sman/man1
man5dir=/sman/man5
man8dir=/sman/man8

die() { echo "$@" >&2; exit 1; }
accept() { eval "$key=\$val"; unset val; }
setkey() { eval "$1=\$val"; unset val; }
append() { eval "$1=\"\${$1:+\$$1 }\$2\""; }
appval() { append "$1" "$val"; unset val; }

optim=-Os

while [ $# -gt 0 ]; do
	key=${1%%=*}
	val=${1#*=}
	test "$key" = "$1" && unset val

	case "$key" in
		commanddir) accept ;;
		servicedir) accept ;;
		systemdir)  accept ;;
		cross)  accept; cross="${cross}-" ;;
		target) accept; cross="${cross:-$target-}" ;;
		arch)   accept ;;
		cc|CC)  setkey cc ;;
		ar|AR)  setkey ar ;;
		strip)  setkey strip ;;
		STRIP)  setkey strip ;;
		cflags) appval cflags; unset optim ;;
		CFLAGS) appval cflags; unset optim ;;
		devel)  append cflags "-Wall -g -DDEVEL"; unset optim ;;
		debug)  append cflags "-Wall -g" ;;
		wextra) append cflags "-Wextra" ;;
		werror) append cflags "-Werror" ;;
		lto)    lto="-flto " ;;
		qemu)   accept ;;
		only) shift; only="$@"; break ;;
		*) die "Unexpected argument $key" ;;
	esac; shift

	test -n "$val" && die "Unexpected argument for $key"
done

append cflags "$optim"
append cflags "$lto"

test -z "$ar" && ar="${cross}ar"
test -z "$strip" && strip="${cross}strip"

case "$cc" in
	*clang*) die "clang is not supported" ;;
esac

test -z "$cc" && cc="${cross}gcc"

if [ -z "$arch" ]; then
	mach=`$cc -dumpmachine`
	mach=${mach%%-*}
	case "$mach" in
		i[3456]86) arch=i386 ;;
		mips64el)  arch=mips64 ;;
		mipsn32)   arch=mips32 ;;
		mipsn32el) arch=mips32 ;;
		mipsel)    arch=mips ;;
		armv*)     arch=arm ;;
		*) arch="$mach"
	esac
	test -n "$arch" || die "Cannot determine target arch"
	test -d "lib/arch/$arch" || die "Unsupported arch $arch"
fi

# Default meaning of qemu=something is to use qemu-something,
# however if it's qemu=/path/to/qemu-blah then use that unchanged.
if [ -z "$qemu" ]; then
	host=`uname -m`
	if [ "$host" = "$mach" ]; then
		qemu="-"
	elif [ "$arch" = "i386" ]; then
		qemu="$arch"
	else
		qemu="$mach"
	fi
fi

case "$qemu" in
	-) qemu='' ;;
	*-*) ;;
	*/*) ;;
	*) qemu="qemu-$qemu" ;;
esac

cat > config.mk <<END
ARCH = $arch

CC = \$/mini-cc
AR = $ar
LD = \$(CC)
AS = \$(CC)
STRIP = $strip
QEMU = $qemu

commanddir = $commanddir
servicedir = $servicedir
systemdir = $systemdir

man1dir = $man1dir
man5dir = $man5dir
man8dir = $man8dir

only = $only
END

cat > mini-cc <<END
#!/bin/sh

case "\$0" in
	*/*) base=\${0%/*} ;;
	*) echo "\$0 may not be called from PATH" >&2; exit 1 ;;
esac

needslib=yes

for _ in "\$@"; do
	case "\$_" in
		-c|-E|-S) unset needslib ;;
	esac
done

END

# GCC may be configured to produce PIEs without explicit -pie options,
# and it would do so even if given -ffreestanding -static. This is not
# acceptable for minibase, so the code below tries to force non-PIE mode.

cat >> mini-cc <<END
exec $cc -ffreestanding -fomit-frame-pointer \\
	-fno-asynchronous-unwind-tables -fno-stack-protector \\
	-static -fno-pie -fno-PIE -fno-pic -fno-PIC $lto \\
	-nostdinc -I\$base/lib/arch/$arch -I\$base/lib -MD \\
	$cflags "\$@" \\
	-nostdlib -Wl,-\\( \${needslib:+\$base/lib/all.a -lgcc} -Wl,-\\)
END

chmod a+x mini-cc

echo "Configured for $arch"
echo
echo "  CC = $cc"
echo "  AR = $ar"
echo "  STRIP = $strip"
echo "  CFLAGS = $cflags"
test -n "$qemu" && echo "  QEMU = $qemu"
echo
echo "  commanddir = $commanddir"
echo "  servicedir = $servicedir"
echo "  systemdir = $systemdir"
echo
echo "  man1dir = $man1dir"
echo "  man5dir = $man5dir"
echo "  man8dir = $man8dir"
echo
test -n "$only" && echo "Tools to build: $only"
echo "Proceed to run 'make'"
