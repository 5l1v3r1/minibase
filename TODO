Big fat warning: POSIX compatibility is *NOT* a goal!

The goal is providing a set of tools that allow one to do the stuff
possible in POSIX, if perhaps with different commands, while keeping
the executables small and the code clean.


* cp, mv, ln?
	ln to do symlinks by default, maybe?

* chvt
	this one should also do deallocvt and openvt, all that fits nicely
	within a single too. Probably should be called "vt" as well.

* reset and/or tset

* ls and stat
	ls should probably be list-only tool, and all traditional ls -l
	stuff should go to stat instead. And instead of ls -lR it should
	look something like this:
		ls -r | stat -i		# stat reads stdin and does basename
		ls -r | xargs -d stat
	
* xargs
	should split on linebreaks by default	

* hexdump
	with a sane common format, *not* the stuff od does.

* wr (or wrt? or write?)
	replace current write with a generic tool that writes to a file (and/or
	stdout) the data read from stdin or files gives or the args themselves.
	That's all quite similar actually. This tool would replace echo, cat and tee.

* dd (or bcp?)
	naturally with sane syntax, i.e.
		dd -b 1M outfile.bin infile.bin
	instead of
		dd bs=1M of=outfile.bin if=infile.bin

* merge mount and umount?
	Seems quite natural but turns out to be really contrieved.
	The tools are almost completely unrelated, *and* have a lot
	of option overlap. The idea is of course to make

		mount -u /mntpoint

	do unmounting.
	
* ifconfig / ip / iw / arp? maybe iptables?



Perfect tool separation
~~~~~~~~~~~~~~~~~~~~~~~
Is it necessary for both ls and stat to stat() files?
Is it necessary for both ls and rm to do tree recursion?
The answer is no, however actually doing so seems to be pointless.

	POSIX		Perfectly separated tools
	-----		-------------------------
	ls -l		ls | xargs stat -l
	ls -lr		ls -r | xargs -d stat -l
	rm -r		ls -r | xargs rm -d

What this means is:
	ls produces a list of files (relative pathnames) and that's all.
	rm does either unlink or rmdir, and that's all
	xargs calls the command with input lines for arguments
	xargs -d additionally prints something like "entering directory"
	stat -l produces ls-lR style line for each command linen argument

The commands are much longer, spawn more processes than necessary,
would require some scripting for humans to use.
For programming, it does not make sense either. Some kind of shell supporting
this kind of style should have those as builtins, with greenthreads of some
sort to avoid unnecesssary context switching.

Even Plan 9 did not go that far.
