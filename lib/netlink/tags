!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
NLMSG_DONE	base.h	31;"	d
NLMSG_ERROR	base.h	30;"	d
NLMSG_NOOP	base.h	29;"	d
NLMSG_OVERRUN	base.h	32;"	d
NLM_F_ACK	base.h	37;"	d
NLM_F_APPEND	base.h	50;"	d
NLM_F_ATOMIC	base.h	44;"	d
NLM_F_CREATE	base.h	49;"	d
NLM_F_DUMP	base.h	45;"	d
NLM_F_DUMP_FILTERED	base.h	40;"	d
NLM_F_DUMP_INTR	base.h	39;"	d
NLM_F_ECHO	base.h	38;"	d
NLM_F_EXCL	base.h	48;"	d
NLM_F_MATCH	base.h	43;"	d
NLM_F_MULTI	base.h	36;"	d
NLM_F_REPLACE	base.h	47;"	d
NLM_F_REQUEST	base.h	35;"	d
NLM_F_ROOT	base.h	42;"	d
cmd	base.h	/^	uint8_t cmd;$/;"	m	struct:nlgen
err	ctx.h	/^	int err;$/;"	m	struct:netlink
errno	base.h	/^	int32_t errno;$/;"	m	struct:nlerr
extend_to_4bytes	attr_buf.c	/^static int extend_to_4bytes(int n)$/;"	f	file:
extend_to_4bytes	attr_nst.c	/^static int extend_to_4bytes(int n)$/;"	f	file:
fd	ctx.h	/^	int fd;$/;"	m	struct:netlink
flags	base.h	/^	uint16_t flags;$/;"	m	struct:nlerr
flags	base.h	/^	uint16_t flags;$/;"	m	struct:nlmsg
len	base.h	/^	uint16_t len;$/;"	m	struct:nlattr
len	base.h	/^	uint32_t len;$/;"	m	struct:nlerr
len	base.h	/^	uint32_t len;$/;"	m	struct:nlmsg
mbuf	attr_gen.c	/^static char* mbuf(struct nlgen* msg) { return msg->payload; }$/;"	f	file:
mlen	attr_gen.c	/^static int mlen(struct nlgen* msg) { return msg->nlm.len - sizeof(*msg); }$/;"	f	file:
msgend	ctx.h	/^	int msgend;$/;"	m	struct:netlink
msgptr	ctx.h	/^	int msgptr;$/;"	m	struct:netlink
netlink	ctx.h	/^struct netlink {$/;"	s
nl_alloc	pack.c	/^static void* nl_alloc(struct netlink* nl, int size)$/;"	f	file:
nl_attr_0_in	attr_buf.c	/^struct nlattr* nl_attr_0_in(char* buf, int len)$/;"	f
nl_attr_is_nest	attr_nst.c	/^int nl_attr_is_nest(struct nlattr* at)$/;"	f
nl_attr_is_printable_str	dump_at.c	/^static int nl_attr_is_printable_str(struct nlattr* at)$/;"	f	file:
nl_attr_is_zstr	attr_str.c	/^int nl_attr_is_zstr(struct nlattr* at)$/;"	f
nl_attr_k_in	attr_buf.c	/^struct nlattr* nl_attr_k_in(char* buf, int len, int type)$/;"	f
nl_attr_len	attr_gen.c	/^int nl_attr_len(struct nlattr* at)$/;"	f
nl_attr_n_in	attr_buf.c	/^struct nlattr* nl_attr_n_in(char* buf, int len, struct nlattr* curr)$/;"	f
nl_check_nest	attr_nst.c	/^int nl_check_nest(char* buf, int len)$/;"	f
nl_check_zstr	attr_str.c	/^int nl_check_zstr(char* buf, int len)$/;"	f
nl_connect	ctx.c	/^long nl_connect(struct netlink* nl, int protocol, int groups)$/;"	f
nl_dump_attr	dump_at.c	/^static void nl_dump_attr(char* pref, struct nlattr* at)$/;"	f	file:
nl_dump_attrs_in	dump_at.c	/^void nl_dump_attrs_in(char* buf, int len)$/;"	f
nl_dump_err	dump_hdr.c	/^void nl_dump_err(struct nlerr* msg)$/;"	f
nl_dump_ifaddr	dump_hdr.c	/^void nl_dump_ifaddr(struct ifaddrmsg* msg)$/;"	f
nl_dump_msg	dump_hdr.c	/^void nl_dump_msg(struct nlmsg* msg)$/;"	f
nl_dump_msg_hdr	dump_hdr.c	/^static void nl_dump_msg_hdr(struct nlmsg* msg)$/;"	f	file:
nl_dump_rec	dump_at.c	/^static void nl_dump_rec(char* pref, struct nlattr* base)$/;"	f	file:
nl_err	base_err.c	/^struct nlerr* nl_err(struct nlmsg* msg)$/;"	f
nl_gen	base_gen.c	/^struct nlgen* nl_gen(struct nlmsg* msg)$/;"	f
nl_get	attr_gen.c	/^struct nlattr* nl_get(struct nlgen* msg, uint16_t type)$/;"	f
nl_get_0	attr_gen.c	/^struct nlattr* nl_get_0(struct nlgen* msg)$/;"	f
nl_get_i32	attr.h	35;"	d
nl_get_int	attr.h	31;"	d
nl_get_n	attr_gen.c	/^struct nlattr* nl_get_n(struct nlgen* msg, struct nlattr* cur)$/;"	f
nl_get_nest	attr_gen.c	/^struct nlattr* nl_get_nest(struct nlgen* msg, uint16_t type)$/;"	f
nl_get_of_len	attr_gen.c	/^void* nl_get_of_len(struct nlgen* msg, uint16_t type, int len)$/;"	f
nl_get_str	attr_gen.c	/^char* nl_get_str(struct nlgen* msg, uint16_t type)$/;"	f
nl_get_u16	attr.h	32;"	d
nl_get_u32	attr.h	33;"	d
nl_get_u64	attr.h	34;"	d
nl_got_message	ctx.c	/^static int nl_got_message(struct netlink* nl)$/;"	f	file:
nl_header	pack.h	33;"	d
nl_hexbytes	dump_at.c	/^static void nl_hexbytes(char* outbuf, int outlen, char* inbuf, int inlen)$/;"	f	file:
nl_hexdump	dump_hex.c	/^void nl_hexdump(char* inbuf, int inlen)$/;"	f
nl_ifindex	ctx.c	/^int nl_ifindex(struct netlink* nl, const char* ifname)$/;"	f
nl_init	ctx.c	/^void nl_init(struct netlink* nl)$/;"	f
nl_msg_err	ctx_cmd.c	/^static void* nl_msg_err(struct netlink* nl, struct nlmsg* msg)$/;"	f	file:
nl_nest	attr_nst.c	/^struct nlattr* nl_nest(struct nlattr* at)$/;"	f
nl_new_cmd	pack.c	/^void nl_new_cmd(struct netlink* nl, uint16_t fam, uint8_t cmd, uint8_t ver)$/;"	f
nl_no_rx_space	ctx.c	/^static int nl_no_rx_space(struct netlink* nl)$/;"	f	file:
nl_put	pack.c	/^void nl_put(struct netlink* nl, uint16_t type, const void* buf, int len)$/;"	f
nl_put_str	pack.c	/^void nl_put_str(struct netlink* nl, uint16_t type, const char* str)$/;"	f
nl_put_u32	pack.c	/^void nl_put_u32(struct netlink* nl, uint16_t type, uint32_t val)$/;"	f
nl_put_u64	pack.c	/^void nl_put_u64(struct netlink* nl, uint16_t type, uint64_t val)$/;"	f
nl_recv	ctx.c	/^struct nlmsg* nl_recv(struct netlink* nl)$/;"	f
nl_recv_chunk	ctx.c	/^long nl_recv_chunk(struct netlink* nl)$/;"	f
nl_recv_expect	ctx_cmd.c	/^struct nlmsg* nl_recv_expect(struct netlink* nl, int hdrsize, int one)$/;"	f
nl_recv_genl_multi	ctx_gen.c	/^struct nlgen* nl_recv_genl_multi(struct netlink* nl)$/;"	f
nl_recv_genl_nonseq	ctx_gen.c	/^struct nlgen* nl_recv_genl_nonseq(struct netlink* nl)$/;"	f
nl_recv_genl_reply	ctx_gen.c	/^struct nlgen* nl_recv_genl_reply(struct netlink* nl)$/;"	f
nl_recv_multi	ctx_cmd.c	/^struct nlmsg* nl_recv_multi(struct netlink* nl, int hdrsize)$/;"	f
nl_recv_multi_into	ctx.h	51;"	d
nl_recv_reply	ctx_cmd.c	/^struct nlmsg* nl_recv_reply(struct netlink* nl, int hdrsize)$/;"	f
nl_recv_seq	ctx_cmd.c	/^static struct nlmsg* nl_recv_seq(struct netlink* nl)$/;"	f	file:
nl_send	ctx.c	/^int nl_send(struct netlink* nl)$/;"	f
nl_send_dump	ctx_cmd.c	/^int nl_send_dump(struct netlink* nl)$/;"	f
nl_send_recv_ack	ctx_cmd.c	/^int nl_send_recv_ack(struct netlink* nl)$/;"	f
nl_send_recv_reply	ctx.h	48;"	d
nl_send_txbuf	ctx.c	/^long nl_send_txbuf(struct netlink* nl)$/;"	f
nl_set_err	ctx_cmd.c	/^static void* nl_set_err(struct netlink* nl, int err)$/;"	f	file:
nl_set_err	ctx_gen.c	/^static void* nl_set_err(struct netlink* nl, int err)$/;"	f	file:
nl_set_rxbuf	ctx.c	/^void nl_set_rxbuf(struct netlink* nl, void* buf, int len)$/;"	f
nl_set_txbuf	ctx.c	/^void nl_set_txbuf(struct netlink* nl, void* buf, int len)$/;"	f
nl_shift_rxbuf	ctx.c	/^static void nl_shift_rxbuf(struct netlink* nl)$/;"	f	file:
nl_start_packet	pack.c	/^void* nl_start_packet(struct netlink* nl, int len)$/;"	f
nl_str	attr_str.c	/^char* nl_str(struct nlattr* at)$/;"	f
nl_sub	attr_sub.c	/^struct nlattr* nl_sub(struct nlattr* at, uint16_t type)$/;"	f
nl_sub_0	attr_sub.c	/^struct nlattr* nl_sub_0(struct nlattr* at)$/;"	f
nl_sub_i32	attr.h	43;"	d
nl_sub_int	attr.h	41;"	d
nl_sub_n	attr_sub.c	/^struct nlattr* nl_sub_n(struct nlattr* at, struct nlattr* cur)$/;"	f
nl_sub_of_len	attr_sub.c	/^void* nl_sub_of_len(struct nlattr* at, uint16_t type, int len)$/;"	f
nl_sub_str	attr_sub.c	/^char* nl_sub_str(struct nlattr* at, uint16_t type)$/;"	f
nl_sub_u32	attr.h	42;"	d
nl_tx_msg	ctx_cmd.c	/^struct nlmsg* nl_tx_msg(struct netlink* nl)$/;"	f
nlattr	base.h	/^struct nlattr {$/;"	s
nlerr	base.h	/^struct nlerr {$/;"	s
nlgen	base.h	/^struct nlgen {$/;"	s
nlm	base.h	/^	struct nlmsg nlm;$/;"	m	struct:nlerr	typeref:struct:nlerr::nlmsg
nlm	base.h	/^	struct nlmsg nlm;$/;"	m	struct:nlgen	typeref:struct:nlgen::nlmsg
nlmsg	base.h	/^struct nlmsg {$/;"	s
payload	base.h	/^	char payload[];$/;"	m	struct:nlattr
payload	base.h	/^	char payload[];$/;"	m	struct:nlgen
payload	base.h	/^	char payload[];$/;"	m	struct:nlmsg
pid	base.h	/^	uint32_t pid;$/;"	m	struct:nlerr
pid	base.h	/^	uint32_t pid;$/;"	m	struct:nlmsg
ptr_in_buf	attr_buf.c	/^static int ptr_in_buf(char* buf, int len, char* ptr)$/;"	f	file:
rx	ctx.h	/^	struct nlmsg* rx;$/;"	m	struct:netlink	typeref:struct:netlink::nlmsg
rxbuf	ctx.h	/^	void* rxbuf;$/;"	m	struct:netlink
rxend	ctx.h	/^	int rxend;$/;"	m	struct:netlink
rxlen	ctx.h	/^	int rxlen;$/;"	m	struct:netlink
seq	base.h	/^	uint32_t seq;$/;"	m	struct:nlerr
seq	base.h	/^	uint32_t seq;$/;"	m	struct:nlmsg
seq	ctx.h	/^	int seq;$/;"	m	struct:netlink
tx	ctx.h	/^	struct nlmsg* tx;$/;"	m	struct:netlink	typeref:struct:netlink::nlmsg
txbuf	ctx.h	/^	void* txbuf;$/;"	m	struct:netlink
txend	ctx.h	/^	int txend;$/;"	m	struct:netlink
txlen	ctx.h	/^	int txlen;$/;"	m	struct:netlink
txover	ctx.h	/^	int txover;$/;"	m	struct:netlink
type	base.h	/^	uint16_t type;$/;"	m	struct:nlattr
type	base.h	/^	uint16_t type;$/;"	m	struct:nlerr
type	base.h	/^	uint16_t type;$/;"	m	struct:nlmsg
unused	base.h	/^	uint16_t unused;$/;"	m	struct:nlgen
version	base.h	/^	uint8_t version;$/;"	m	struct:nlgen
