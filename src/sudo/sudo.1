.TH sudo 1
'''
.SH NAME
\fBsudo\fR \- run a privileged command
'''
.SH SYNOPSIS
\fBsudo\fR \fIcommand\fR [\fIarg arg ...\fR]
'''
.SH DESCRIPTION
This tool performs a controlled indirect privilege escalation. Supplied
\fIcommand\fR is passed to \fBsuhub\fR(8), which then runs it with a set
of \fBcapabilities\fR(7) unrelated to (and potentially higher than) those
of the \fBsudo\fR process itself. See \fBsuhub\fR(8) on which \fIcommands\fR
are allowed and how their privilege level is set.
.P
Spawned \fIcommand\fR gets current directory, standard file descriptors
and real uid:gid of the \fBsudo\fR process, but not its environment or any
other properties. \fBsudo\fR waits until the spawned process exits before
exiting itself, and attempts to relay any SIGINT, SIGTERM and SIGHUB it gets
to the spawned process. Killing \fBsudo\fR prompts \fBsuhub\fR to terminate
the corresponding privileged process.
'''
.SH USAGE
For the most part, \fBsudo\fR \fIcommand\fR should work just like running
\fIcommand\fR directly if it were in $PATH. Note however the \fIcommands\fR
that \fBsudo\fR runs do not come from $PATH, and current $PATH is not even
passed to the spawned processes, which instead get their $PATH from \fBsuhub\fR.
.P
Symlinks to \fBsudo\fR may be used as shortcuts for frequently used commands.
If run with basename(argv[0]) distinct from "sudo", \fBsudo\fR will take that
as the \fIcommand\fR and argv[1:] as its arguments.
'''
.SH FILES
.IP "/run/suhub" 4
\fBsuhub\fR(8) control socket.
'''
.SH SEE ALSO
\fBsuhub\fR(8); \fBcredentials\fR(7), \fBcapabilities\fR(7).
