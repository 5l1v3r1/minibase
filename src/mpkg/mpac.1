.TH mpac 1
'''
.SH NAME
\fBmpac\fR \- PAC archive format tool
'''
.SH SYNOPSIS
\fBmpac\fR [\fBc\fR|\fBcreate\fR] \fIfile.pac\fR \fIdirectory\fR
.br
Pack the contents of \fIdirectory\fR into \fIfile.pac\fR.
.P
\fBmpac\fR [\fBx\fR|\fBextract\fR] \fIfile.pac\fR \fIdirectory\fR
.br
Unpack \fIfile.pac\fR into \fIdirectory\fR.
.P
\fBmpac\fR [\fBp\fR|\fBpack\fR] \fIfile.pac\fR \fIinput.list\fR
.br
Create archive containing files listed in \fIinput.list\fR.
.P
\fBmpac\fR [\fBt\fR|\fBlist\fR] \fIfile.pac\fR
.br
List file names packed in \fIfile.pac\fR.
.P
\fBmpac\fR [\fBd\fR|\fBdump\fR] \fIfile.pac\fR
.br
Output raw index entries in \fIfile.pac\fR.
'''
.SH FILE FORMAT
PAC files use index-before-contents layout, unlike tar which mixes index
and layout, and zip where the index follows contents. Overall structure:
.P
.ni
    HEADER ENTRY ENTRY ... ENTRY content content ... content
.fi
.P
The header encodes the size of the index, each ENTRY describes a directory
or a leaf node (file). Concatenated content of the individual leaf nodes
follows the index.
.P
The assumed mode of operation for all unpacking tools is to load the whole
index into memory, and then keep reading the content stream and re-directing
it to appropriate locations.
.P
HEADER has the following format:
.P
.ni
    "PAC" c s [ s s s ]
.fi
.P
The first three bytes identify the format for basic input validation purposes.
The following byte, \fIc\fR, encodes how many \fIs\fR bytes follow (@ = 1,
A = 2, B = 3, C = 4), and one to four \fIs\fR bytes encode the total size
of the ENTRYs in little-endian order.
.P
Each ENTRY has the following format:
.P
.ni
    T [ s s s s ] n n ... n \\0
.fi
.P
The leading byte \fIT\fR encodes entry type. If bit 7 is set (T & 0x80), then
the entry is a directory, (T & 0x7F) is its depth in the three, and there are
no \fIs\fR bytes. Otherwise, it's a leaf node, (T & 0x03) encodes the number
of \fIs\fR bytes to follow (1, 2, 3 or 4, similar to index size in the HEADER),
and (T & 0x0C) encodes the type of the entry: 1 = regular file, 2 = executable,
3 = symlink. The \fIn\fR bytes are the base name of the entry. Each entry is
terminated with a NUL byte at the end of the name.
.P
Leaf entries belong to the last preceding directory; leaf entries that appear
before any directory entries are top-level (depth 0) entries. Within their
respective subtrees, all leaf entries and all subdirectories must come in byte
order of their names. The ordering is mostly irrelevant for \fBmpac\fR but
other tools like \fBmpkg\fR may check it and refuse to process mis-ordered
archives.
.P
The content is appended in the order correponding entries appear in the index.
'''
.SH PACK DESCRIPTION FORMAT
The \fBpack\fR command takes a text file in the following format:
.P
.ni
    # comment
    path/to/foo.bin

    > some/dir
    path/to/bar.bin
.fi
.P
Each non-prefix line is a path name to a file in the local filesystem.
The file will be opened using its path name, but in the archive only its base
name will remain. The \fB>\fR lines describe the directory structure within
the archive. Files following a directory line are packed inside that directory
within the archive.
.P
The example above describes an archive with two files, \fIfoo.bin\fR and
\fIsome/dir/bar.bin\fR. The content for those files will be taken from
\fIpath/to/foo.bin\fR and \fIpath/to/bar.bin\fR respectively.
.P
Directories must come in byte order of their components. Within each directory,
files must come in byte order of their base names. The order will be checked by
\fBmpac\fR.
'''
.SH DUMP OUTPUT FORMAT
The \fBdump\fR command outputs raw index entries, formatted for readability,
but otherwise left as is. It may be useful for examining how the archive
structure looks internally.
.P
Each line is an entry, with prefix denoting its type: \fB-\fR is a regular
files, \fB+\fR executable, \fB~\fR symlink. Numeric prefix means directory,
and the number is its depth. For leaf entries, file size is given after the
name in parenthesis.
.P
The entries are show in the order they appear in the index.
'''
.SH USAGE NOTES
PAC format is meant to be used for distributing pre-built software packages,
and for used as the packing format for the system package manager. In this
application, \fBmpac\fR should be used to create and examine packages, but
not to install them. Another tool is needed to handle installation, removal
and package management overall. See \fBmpkg\fR(1) for instance.
.P
PAC format does not store metadata that would make packages non-reproducible,
like ownership and creation/modification timestamps. PAC format does not
support special files either. It is up to the installation tool to set those
appropriately.
.P
PAC files are not supposed to include package metadata, only the files.
.P
\fBmpac\fR treats symlinks as plain text files containg link target filenames.
Symlinks are never dereferenced, and no processing is ever done on the targets.
'''
.SH SEE ALSO
\fBmpkg\fR(1).
