What is this?
~~~~~~~~~~~~~
This project contains a set of tools intended for early boot environment
(initrd, initcpio and possibly later stages for small systems).
The tools are small, statically linked and need no libc.

The project is not complete yet. Some crucial tools are still
to be written before building a viable initcpio becomes possible.
Use at your own risk.


How is it different from busybox?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Busybox aims to provide common POSIX tools in a package with the
smallest total size, or something close to that. It is not very
well suited for providing individual tools, only the whole package.

Busybox typically stays in the memory after being loaded (cached)
once, saving memory and time for repeated usage.

This project aims to provide small individual tools, so that they
could be combined freely and picked one at a time. It does not
attempt to provide anything resembling a usable system.

These tools are meant to be used rarely, perhaps only once during
boot, then unloaded immediately and discarded.


Compatibility
~~~~~~~~~~~~~
None. The tools follow Linux syscalls closely instead of trying
to be compatible with common GNU or busybox implementations.


Hybrid setups
~~~~~~~~~~~~~
Because the tools are standalone and independent, they can be used
together with e.g. busybox, providing rarely-used, system-specific
functions and leaving POSIX stuff to busybox.


What is this *really* about?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Re-thinking the role and design of libc, experimentally.

Also, showing that util-linux are simple by their nature simple, small
and do not need to depend on the POSIX compatibility layer aka libc.

See also: Plan 9 from user space.
(note however than Linux builds of plan9port are surprisingly large)
In a way this is an attempt to be more plan9 than plan9 itself.

While busybox is the tool of choice for building small systems,
it hides the simplicitly of the common tools pretty well by being
a single-call binary with lots of internal interlinking.


Licensing
~~~~~~~~~
GPL version 2 or any later, see COPYING.


Credits
~~~~~~~
A lot of code here actually comes from busybox, which in turn
pulls from util-linux and coreutils, with numerous modifications
along the way.

Syscall code (static inline functions with asm volatile blocks)
follows musl. Because they got it right.

The Rust coreutils project provided a great deal of inspiration,
specifically by showing how not to write coreutils.


See also
~~~~~~~~
https://busybox.net/
http://www.landley.net/toybox/
http://suckless.org (ubase and sbase)
https://swtch.com/plan9port/

https://www.gnu.org/software/coreutils/coreutils.html
https://www.kernel.org/pub/linux/utils/util-linux/
https://github.com/uutils/coreutils
