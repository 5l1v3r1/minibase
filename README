What is this?
~~~~~~~~~~~~~
minibase is a set of small userspace tools for Linux intended to
boot the system and provide a lightweight but reliable foundation
to build the rest of the system on.

The tools are written in raw syscalls, statically linked, and have
no external dependencies, not even libc. Any reasonably recent gcc
or clang toolchain targeting the right CPU architecture can be used
to build the package. Once built, the executables should run on any
CPU-compatible Linux system providing the right syscalls (for most
tools, that means kernel version 3.x and above).

Currently supported targets: x86_64 arm arm64 rv64.


What's inside / Current status
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The project is highly experimental and (at this point) incomplete.
Some tools are missing, and some still need work.

  * Small basic unix tools (cat, ls, du, df etc).
  * Several small linux-specific tools (systime, sync, dmesg etc).

  * Simple non-interactive shell (msh) for scripting the boot
    process and service startup [usable].
  * Early-stage boot utils (switchroot, kmod, mount).

  * Non-encrypted block device locator (findblk) [usable?]
  * Encrypted device locator and passphrase prompt tool (passblk) [usable?]
  * Support tooling for disc encryption (dektool, dmcrypt) [usable]
  
  * Process supervisor suite (init, super, reboot, svc), split-stage
    implementation similar to daemontools or runit [usable].
  
  - No udevd yet.
  - No unprivileged mount daemon yet.
  * Controlled privilege escalation tool (sudo) [usable].

  * DHCP client (dhcp) [usable].
  * manual interface setup tools (ip4cfg, ip4info) [incomplete].
  - No sntpd yet.

  * Wi-Fi scanner and connection manager (wimon), also capable of handling
    wired interfaces
  * Minimalistic wpa supplicant (wpa), WPA2-PSK only, CCMP/CCMP or CCMP/TKIP
    [both usable but pending redesign]

  - No package manager / download tool yet.

  * VT/DRM/input multiplexer (vtmux) aka that part of systemd-logind
    everyone keeps asking about [usable, weston only, issues?].

  - No greeters yet.
  - No interactive shell yet.

With everything in place, the system should be able to boot, on minibase
alone, up to the point where it's ready to download, install and start GUI.


What's the inteded hardware for this?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
minibase is being written primarily with a personal laptop in mind.

This choice only affects certain tools (super, wimon, vtmux) which either
allow or expect some user interaction. For unattended or headless systems,
it would be better to replace them with simpler equivalents, which may get
written at some point but are not a priority right now.


How is it different from busybox?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Busybox is a multi-call binary, minibase is a bunch of standalone
statically linked binaries.

Busybox provides mostly POSIX- or GNU-compatible tools. Minibase does not
try to be compatible with either.

Busybox needs a proper libc toolchain to build, minibase does not.
On the other hand, busybox can be built for any target given libc supports
while minibase only supports 4 targets at this moment.

The set of tools is quite different. Busybox provides more POSIX-style
text manipulation tools (grep, patch, vi) while minibase is mostly about
Linux-specific system services (KMS VTs, Wi-Fi, disk encryption).


How is it different from common GNU tools?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
About the same way busybox is, plus minibase is not restricted
by POSIX compatibility concerns. It's effectively a different OS,
a Linux but not GNU/Linux, but one that still allows running parts
of the GNU system atop.

Unlike the GNU system (and to some degree busybox) minibase is designed
to not rely on suid bits or file capabilities. Anything that requires
priviledge escalation in Linux is done via IPC to priviledged services.


How is it different from systemd?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Smaller, simpler and less inter-dependent tools.
Less invasive in respect to the system atop. Easier to build.
No D-bus, or any bus for that matter, only p2p IPC via unix sockets.

Different approach to system security. Minibase is meant for personal
computing devices while systemd apparently targets mainframes.


Compatibility
~~~~~~~~~~~~~
The tools are *NOT* meant to be POSIX-, GNU-, or anything else compatible.


Licensing
~~~~~~~~~
GNU Public License version 3, see COPYING.

Note that due to the nature of the tools, most of the common GPL gripes
do not apply to this package. You should not be linking against them
or extending them anyhow. However, non-tivoization clause is still there.

Limited closed-box license is planned but has not been written yet.

The code in lib/sys, lib/bits and lib/arch constitutes the public interface
of the Linux kernel. No claims are made for that code, and it should not be
copyrightable anyway. If unsure, grab corresponding fragments from either
the kernel sources (GPLv2) or the musl libc (MIT license).

The code in lib/crypto is mostly BSD-licensed. See README there.


Credits
~~~~~~~
The whole project was inspired and initially heavily influenced by busybox.
Certain decision from skarnet/s6 project also played significant role.

Syscall code (static inline functions with asm volatile blocks)
follows musl, because they got it right.

The Rust coreutils project provided great deal of inspiration,
specifically by showing how not to write coreutils.


See also
~~~~~~~~
https://busybox.net/
http://www.landley.net/toybox/
http://www.fefe.de/embutils/
http://skarnet.org/software/ (portable-utils, linux-utils)
http://suckless.org (ubase and sbase)
http://jdebp.eu/Softwares/nosh/
https://swtch.com/plan9port/

https://www.gnu.org/software/coreutils/coreutils.html
https://www.kernel.org/pub/linux/utils/util-linux/
https://github.com/uutils/coreutils

https://github.com/mit-pdos/xv6-public (userspace tools)
