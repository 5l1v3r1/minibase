What is this?
~~~~~~~~~~~~~
This project contains small standalone implementations of common
Linux tools (cat, echo, insmod, mkdir and the likes), written in
raw syscalls, statically linked, and not dependent on libc.

The goal of the project is to show that the basic tools need not
be large, bloated and dynamically-linked like the GNU implementations,
and that the opposite can be achieved without extreme size-reducing
tricks like those used in busybox.


Current status
~~~~~~~~~~~~~~
The project is highly experimental and (at this point) incomplete.
Some crucial tools are still to be written before even building
a viable initcpio becomes possible. Use at your own risk.


Who may want to use it
~~~~~~~~~~~~~~~~~~~~~~
First and foremost people who would like to avoid libc dependency
for whatever reason. This may be useful for initcpio, but also for
weird cases like messing with binary-only router firmware when
linking against its internal libc is undesirable or impossible.

Another idea is getting as far as possible with the boot process
on static tools only, which may lead to a self-contained and very
fast "base system".

Finally, it is easy to trace and audit these tools down to syscall
level, both for security and for educational purposes.


How is it different from busybox?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Busybox aims to provide common POSIX tools in a package with the
smallest total size, or something close to that. It is not very
well suited for providing individual tools, only the whole package.

Busybox typically stays in the memory after being loaded (cached)
once, saving memory and time for repeated usage.

This project aims to provide small individual tools, so that they
could be combined freely and picked one at a time.


How is it different from common (GNU) tools?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In a lot of ways really, but here's an easy trick that highlights
the fundamental distinction well.
Strace some simple tool from a common Linux distro:

	strace echo Hello, world

then repeat with the same tool from this package:

	strace ./echo Hello, world

For best effect, make sure you're using GNU tools linked dynamically
against GNU libc, though even busybox linked against musl produces
rather impressive traces.


Compatibility
~~~~~~~~~~~~~
The tools are *NOT* meant to be POSIX- or GNU-compatible.
Instead, the goal is to provide comparable functionality
by simplier means.


Licensing
~~~~~~~~~
GPL version 3, see COPYING.


Credits
~~~~~~~
Some of the code here comes from busybox, which in turn pulls
from util-linux and coreutils, with numerous modifications
along the way.

Syscall code (static inline functions with asm volatile blocks)
follows musl. Because they got it right.

The Rust coreutils project provided a great deal of inspiration,
specifically by showing how not to write coreutils.


See also
~~~~~~~~
https://busybox.net/
http://www.landley.net/toybox/
http://www.fefe.de/embutils/
http://suckless.org (ubase and sbase)
https://swtch.com/plan9port/

https://www.gnu.org/software/coreutils/coreutils.html
https://www.kernel.org/pub/linux/utils/util-linux/
https://github.com/uutils/coreutils

https://github.com/mit-pdos/xv6-public (userspace tools)
